{"version":3,"sources":["Components/GameTiles/index.js","App.js","serviceWorker.js","index.js"],"names":["GameTiles","state","score","highScore","images","src","picked","handleClick","event","index","target","id","updatedImages","updatedScore","updatedHighScore","forEach","image","console","log","i","length","j","Math","floor","random","temp","document","getElementById","textContent","setState","Container","this","map","Image","className","key","indexOf","thumbnail","onClick","Component","App","Navbar","bg","expand","sticky","Brand","href","Collapse","Text","Jumbotron","Boolean","window","location","hostname","match","ReactDOM","render","basename","process","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4UAgJeA,G,iNAzIbC,MAAQ,CACNC,MAAO,EACPC,UAAW,EACXC,OAAS,CACP,CACEC,IAAK,+BACLC,QAAQ,GAEV,CACED,IAAK,+BACLC,QAAQ,GAEV,CACED,IAAK,8BACLC,QAAQ,GAEV,CACED,IAAK,8BACLC,QAAQ,GAEV,CACED,IAAK,6BACLC,QAAQ,GAEV,CACED,IAAK,+BACLC,QAAQ,GAEV,CACED,IAAK,8BACLC,QAAQ,GAEV,CACED,IAAK,8BACLC,QAAQ,GAEV,CACED,IAAK,iCACLC,QAAQ,GAEV,CACED,IAAK,+BACLC,QAAQ,GAEV,CACED,IAAK,gCACLC,QAAQ,GAEV,CACED,IAAK,gCACLC,QAAQ,K,EAKdC,YAAc,SAAAC,GAGZ,IAAMC,EAAQD,EAAME,OAAOC,GAGvBC,EAAgB,EAAKX,MAAMG,OAG3BS,EAAe,EAAKZ,MAAMC,MAG1BY,EAAmB,EAAKb,MAAME,UAGlC,GAAIS,EAAcH,GAAOH,OAGnBO,EAAeC,IACjBA,EAAmBD,GAIrBA,EAAe,EAGfD,EAAcG,SAAQ,SAAAC,GACpBA,EAAMV,QAAS,SAIZ,CAGLM,EAAcH,GAAOH,QAAS,EAE9BW,QAAQC,IAAIN,GAGZ,IAAK,IAAIO,EAAIP,EAAcQ,OAAS,EAAGD,EAAI,EAAGA,IAAK,CACjD,IAAME,EAAIC,KAAKC,MAAMD,KAAKE,SAAWL,GAC/BM,EAAOb,EAAcO,GAC3BP,EAAcO,GAAKP,EAAcS,GACjCT,EAAcS,GAAKI,EAGrBR,QAAQC,IAAIN,GAGZC,GAAgB,EAGlBa,SAASC,eAAe,SAASC,YAAcf,EAC/Ca,SAASC,eAAe,cAAcC,YAAcd,EAGpD,EAAKe,SAAS,CACZ3B,MAAOW,EACPV,UAAWW,EACXV,OAAQQ,K,wEAIF,IAAD,OACP,OACE,kBAACkB,EAAA,EAAD,KACGC,KAAK9B,MAAMG,OAAO4B,KAAI,SAAAhB,GAAK,OAC1B,kBAACiB,EAAA,EAAD,CACEC,UAAU,gBACV7B,IAAKW,EAAMX,IACX8B,IAAK,EAAKlC,MAAMG,OAAOgC,QAAQpB,GAC/BL,GAAI,EAAKV,MAAMG,OAAOgC,QAAQpB,GAC9BqB,WAAS,EACTC,QAAS,EAAK/B,sB,GAlIFgC,cCiCTC,MA7Bf,WACE,OACE,yBAAKN,UAAU,OAEb,kBAACO,EAAA,EAAD,CAAQC,GAAG,QAAQC,OAAO,KAAKC,OAAO,OACpC,kBAACH,EAAA,EAAOI,MAAR,CAAcC,KAAK,SAAnB,gBACA,kBAACL,EAAA,EAAOM,SAAR,CAAiBpC,GAAG,mBAAmBuB,UAAU,uBAC/C,kBAACO,EAAA,EAAOO,KAAR,eACS,0BAAMrC,GAAG,SAAT,KADT,kBACiD,0BAAMA,GAAG,cAAT,QAMrD,kBAACsC,EAAA,EAAD,KACE,wBAAIf,UAAU,QAAd,qBACA,kEACsC,6BADtC,+CAE8C,6BAF9C,mCAQF,kBAAC,EAAD,QCrBcgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,kBCVNC,IAASC,OAAO,kBAAC,IAAD,CAAQC,SAAUC,gBAAwB,kBAAC,EAAD,OAAkBhC,SAASC,eAAe,SD2H9F,kBAAmBgC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.dd521e5b.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport Container from \"react-bootstrap/Container\";\nimport Image from \"react-bootstrap/Image\";\nimport \"./style.css\";\n\nclass GameTiles extends Component {\n\n  state = {\n    score: 0,\n    highScore: 0,\n    images : [\n      {\n        src: \"./assets/images/totadile.png\",\n        picked: false\n      },\n      {\n        src: \"./assets/images/squirtle.png\",\n        picked: false\n      },\n      {\n        src: \"./assets/images/pikachu.png\",\n        picked: false\n      },\n      {\n        src: \"./assets/images/psyduck.png\",\n        picked: false\n      },\n      {\n        src: \"./assets/images/phampy.png\",\n        picked: false\n      },\n      {\n        src: \"./assets/images/munchlax.png\",\n        picked: false\n      },\n      {\n        src: \"./assets/images/jirachi.png\",\n        picked: false\n      },\n      {\n        src: \"./assets/images/fenekin.png\",\n        picked: false\n      },\n      {\n        src: \"./assets/images/charmander.png\",\n        picked: false\n      },\n      {\n        src: \"/assets/images/charizard.png\",\n        picked: false\n      },\n      {\n        src: \"./assets/images/bulbasaur.png\",\n        picked: false\n      },\n      {\n        src: \"./assets/images/blastoise.png\",\n        picked: false\n      }\n    ]\n  };\n\n  handleClick = event => {\n\n    // Get the index in the images array of the image clicked\n    const index = event.target.id;\n\n    // Make a copy of the images array in the current state.\n    let updatedImages = this.state.images;\n\n    // Make a copy of the score in the current state.\n    let updatedScore = this.state.score;\n\n    // Make a copy of the high score in the current state.\n    let updatedHighScore = this.state.highScore;\n\n    // Check if the image has already been picked.\n    if (updatedImages[index].picked) {\n\n      // Update high score if the new score is higher than the old high score.\n      if (updatedScore > updatedHighScore) {\n        updatedHighScore = updatedScore;\n      }\n\n      // Reset score to 0.\n      updatedScore = 0;\n\n      // Reset all picked booleans to false.\n      updatedImages.forEach(image => {\n        image.picked = false;\n      });\n\n    // Image has not already been picked.\n    } else {\n\n      // Set picked boolean to true.\n      updatedImages[index].picked = true;\n\n      console.log(updatedImages);\n\n      // Shuffle images\n      for (let i = updatedImages.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * i);\n        const temp = updatedImages[i];\n        updatedImages[i] = updatedImages[j];\n        updatedImages[j] = temp;\n      }\n\n      console.log(updatedImages);\n\n      // Update current score.\n      updatedScore += 1;\n    }\n    // Update score content in spans\n    document.getElementById(\"score\").textContent = updatedScore;\n    document.getElementById(\"high-score\").textContent = updatedHighScore;\n    \n    // Update state to reflect changes.\n    this.setState({\n      score: updatedScore,\n      highScore: updatedHighScore,\n      images: updatedImages\n    });\n  }\n\n  render() {\n    return (\n      <Container>\n        {this.state.images.map(image => (\n          <Image \n            className=\"game-tile m-2\" \n            src={image.src}\n            key={this.state.images.indexOf(image)}\n            id={this.state.images.indexOf(image)} \n            thumbnail \n            onClick={this.handleClick}\n          />\n        ))}\n      </Container>\n    );\n  }d\n\n}\n\nexport default GameTiles;","import React from 'react';\nimport './App.css';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Jumbotron from 'react-bootstrap/Jumbotron';\nimport GameTiles from './Components/GameTiles';\n\n\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      {/* Nav Bar */}\n      <Navbar bg=\"light\" expand=\"lg\" sticky=\"top\">\n        <Navbar.Brand href=\"#home\">Memory Game!</Navbar.Brand>\n        <Navbar.Collapse id=\"basic-navbar-nav\" className=\"justify-content-end\">\n          <Navbar.Text>\n            Score: <span id=\"score\">0</span> | High Score: <span id=\"high-score\">0</span>\n          </Navbar.Text>\n        </Navbar.Collapse>\n      </Navbar>\n\n      {/* Title Jumbotron with Instructions */}\n      <Jumbotron>\n        <h1 className=\"mb-4\">Click Memory Game</h1>\n        <p>\n          Clicking on an image earns 1 point. <br/>\n          Clicking on the same image resets the game! <br/>\n          Let's see how high you can go!\n        </p>\n      </Jumbotron>\n\n      {/* Div which will contain the game on page load. */}\n      <GameTiles />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nReactDOM.render(<Router basename={process.env.PUBLIC_URL}><App /></Router>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}